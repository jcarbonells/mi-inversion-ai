# -*- coding: utf-8 -*-
"""orchestrator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JlxaXEvWfNO86KrZzD5xttIZcsB5Cwn2
"""

# orchestrator.py
import os
import json
import pandas as pd
import subprocess
import sys
from datetime import datetime

# --- Configuraci√≥n ---
BASE = "/content/drive/MyDrive/investment_ai"
NOTEBOOKS_DIR = f"{BASE}/notebooks"
REPORTS_DIR = f"{BASE}/reports"
DATA_DIR = f"{BASE}/data"

# Asegurar que las carpetas existan
os.makedirs(REPORTS_DIR, exist_ok=True)
os.makedirs(DATA_DIR, exist_ok=True)

def run_full_orchestrator(verbose=True):
    """
    Ejecuta la cadena completa de agentes con calibraci√≥n din√°mica.

    Args:
        verbose (bool): Si True, imprime progreso detallado.

    Returns:
        tuple: (fx_signals, kpis, actions, log_message)
    """
    if verbose:
        print("üîÑ Iniciando orquestador con calibraci√≥n din√°mica...")

    # 1. Leer rendimiento hist√≥rico para calibrar pesos
    PERF_PATH = f"{REPORTS_DIR}/performance_summary.json"
    agent_weights = {"fx_agent": 1.0, "quant_signals": 1.0}

    if os.path.exists(PERF_PATH):
        try:
            with open(PERF_PATH) as f:
                perf = json.load(f)
            if "fx_agent" in perf:
                precision = perf["fx_agent"]["precision_total"]
                agent_weights["fx_agent"] = min(1.5, max(0.5, precision / 0.7))
            if verbose:
                print(f"üìä Pesos calibrados: {agent_weights}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error al leer rendimiento: {e}. Usando pesos por defecto.")
    else:
        if verbose:
            print("‚ÑπÔ∏è No se encontr√≥ performance_summary.json. Usando pesos por defecto.")

    # 2. Pasar pesos como variables de entorno
    os.environ["FX_AGENT_WEIGHT"] = str(agent_weights["fx_agent"])
    os.environ["QUANT_AGENT_WEIGHT"] = str(agent_weights["quant_signals"])

    # 3. Lista de notebooks a ejecutar (¬°NO incluir el orquestador!)
    notebooks = [
        "00_liquidity_agent.ipynb",
        "01_data_prep.ipynb",
        "02_portfolio_exposure.ipynb",
        "06_portfolio_reconstructor.ipynb",
        "07_asset_metrics.ipynb",
        "11_market_analyst.ipynb",
        "12_sectorial_strength.ipynb",
        "03_fx_agent.ipynb",          # ‚Üê usar√° FX_AGENT_WEIGHT
        "04_quant_signals.ipynb",     # ‚Üê usar√° QUANT_AGENT_WEIGHT
        "05_risk_manager.ipynb",
        "07_reporter_advanced.ipynb"
        # ‚ùå NO incluir "09_orchestrator.ipynb" aqu√≠
    ]

    # 4. Ejecutar notebooks con manejo de errores detallado
    for nb in notebooks:
        if verbose:
            print(f"\n‚ñ∂Ô∏è Ejecutando {nb}...")

        cmd = [
            sys.executable, "-m", "nbconvert",
            "--to", "notebook",
            "--execute",
            f"{NOTEBOOKS_DIR}/{nb}",
            "--output", f"{NOTEBOOKS_DIR}/{nb}",
            "--log-level=ERROR"
        ]

        result = subprocess.run(cmd, capture_output=True, text=True)

        if result.returncode != 0:
            error_msg = f"""
‚ùå ERROR al ejecutar {nb}:
STDOUT: {result.stdout[-500:]}
STDERR: {result.stderr[-1000:]}
            """
            if verbose:
                print(error_msg)
            raise RuntimeError(f"Fallo en {nb}. Ver detalles arriba.")
        else:
            if verbose:
                print(f"‚úÖ {nb} completado.")

    # 5. Cargar resultados
    fx_path = f"{REPORTS_DIR}/fx_hedge_signal.csv"
    fx_signals = pd.read_csv(fx_path) if os.path.exists(fx_path) else pd.DataFrame()

    if verbose:
        print(f"\nüìà Se√±ales FX cargadas: {len(fx_signals)} filas")

    risk_path = f"{REPORTS_DIR}/risk_summary.json"
    kpis = {}
    if os.path.exists(risk_path):
        try:
            with open(risk_path) as f:
                kpis = json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è Error al cargar KPIs: {e}")

    # 6. Generar acciones
    actions = []
    if not fx_signals.empty:
        for _, row in fx_signals.iterrows():
            if row["cobertura_recomendada"] == "S√≠":
                actions.append({
                    "tipo": "cobertura_fx",
                    "divisa": row["divisa"],
                    "porcentaje": row["%_cobertura"],
                    "importe_eur": row["exposicion_eur"]
                })

    # 7. Guardar log de ejecuci√≥n
    try:
        execution_log = {
            "fecha": datetime.now().isoformat(),
            "agent_weights": agent_weights,
            "performance_snapshot": json.load(open(PERF_PATH)) if os.path.exists(PERF_PATH) else None
        }
        with open(f"{REPORTS_DIR}/execution_log.json", "w") as f:
            json.dump(execution_log, f, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è Error al guardar execution_log.json: {e}")

    log_msg = f"[{datetime.now().isoformat()}] Orquestador completado. Pesos: {agent_weights}"
    if verbose:
        print(f"\n‚úÖ {log_msg}")

    return fx_signals, kpis, actions, log_msg


# === NO EJECUTES NADA AQU√ç ===
# Este archivo SOLO define la funci√≥n.
# Para ejecutarlo, usa un script separado o una celda en Colab:
#
# from orchestrator import run_full_orchestrator
# signals_df, kpis, actions, log = run_full_orchestrator()

# orchestrator.py
import os
import pandas as pd
import numpy as np
import json
import subprocess
import sys
from datetime import datetime, timedelta
import yfinance as yf
import glob

# --- FUNCI√ìN PARA REGISTRAR SE√ëALES (PARA PERFORMANCE AGENT) ---
def log_signal(
    agente: str,
    tipo_senal: str,
    recomendacion: str,
    contexto: dict = None,
    horizonte_eval: str = "5d",
    metadata: dict = None
):
    """
    Registra una se√±al emitida por un agente en signals_emitted.csv.
    """
    SIGNALS_LOG_PATH = f"{BASE}/data/signals_emitted.csv"
    os.makedirs(os.path.dirname(SIGNALS_LOG_PATH), exist_ok=True)

    new_row = {
        "fecha_emision": datetime.today().strftime("%Y-%m-%d"),
        "agente": agente,
        "tipo_senal": tipo_senal,
        "recomendacion": recomendacion,
        "contexto_liquidez": contexto.get("liquidez_regime", "N/A") if contexto else "N/A",
        "contexto_mercado": contexto.get("market_regime", "N/A") if contexto else "N/A",
        "horizonte_eval": horizonte_eval,
        "se√±al_id": f"{agente}_{datetime.today().strftime('%Y%m%d')}_{hash(recomendacion) % 1000:03d}"
    }

    import json as json_lib
    if metadata:
        new_row["metadata"] = json_lib.dumps(metadata, ensure_ascii=False)
    else:
        new_row["metadata"] = "{}"

    # Cargar o crear CSV
    if os.path.exists(SIGNALS_LOG_PATH):
        df = pd.read_csv(SIGNALS_LOG_PATH)
    else:
        df = pd.DataFrame(columns=[
            "fecha_emision", "agente", "tipo_senal", "recomendacion",
            "contexto_liquidez", "contexto_mercado", "horizonte_eval", "se√±al_id", "metadata"
        ])

    df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
    df.to_csv(SIGNALS_LOG_PATH, index=False, encoding="utf-8")
    print(f"‚úÖ Se√±al registrada para evaluaci√≥n: {recomendacion[:60]}...")

# --- Configuraci√≥n ---
BASE = "/content/drive/MyDrive/investment_ai"
NOTEBOOKS_DIR = f"{BASE}/notebooks"
REPORTS_DIR = f"{BASE}/reports"
DATA_DIR = f"{BASE}/data"

# --- Contratos de salida por agente ---
CONTRATOS = {
    "00_liquidity_agent.ipynb": [
        "reports/liquidity_regime_latest.json",
        "reports/liquidity_dashboard_latest.md",
        "reports/liquidity_dashboard_latest.html"
    ],
    "01_data_prep.ipynb": ["data/raw/my_portfolio_prices.parquet"],
    "02_portfolio_exposure.ipynb": ["reports/portfolio_enriched_final.csv"],
    "06_portfolio_reconstructor.ipynb": ["reports/portfolio_daily_value.csv"],
    "07_asset_metrics.ipynb": ["reports/asset_metrics.csv"],
    "11_market_analyst.ipynb": ["reports/market_regime_latest.json"],
    "12_sectorial_strength.ipynb": ["reports/sector_strength_latest.json"],
    "03_fx_agent.ipynb": ["reports/fx_hedge_latest.json"],
    "04_quant_signals.ipynb": ["reports/quant_signals_latest.json"],
    "05_risk_manager.ipynb": ["reports/risk_dashboard_latest.json"],
    "07_reporter_advanced.ipynb": ["reports/report_final_*.md"]  # Patr√≥n
}

# --- Dependencias por agente ---
DEPENDENCIAS = {
    "03_fx_agent.ipynb": ["market_regime_latest.json", "portfolio_daily_value.csv"],
    "04_quant_signals.ipynb": ["market_regime_latest.json", "sector_strength_latest.json", "portfolio_enriched_final.csv"],
    "05_risk_manager.ipynb": ["portfolio_daily_value.csv", "portfolio_enriched_final.csv"]
}

def verificar_dependencias(notebook_name):
    """Verifica que los archivos requeridos existan antes de ejecutar el notebook."""
    if notebook_name not in DEPENDENCIAS:
        return True
    for archivo in DEPENDENCIAS[notebook_name]:
        ruta = os.path.join(REPORTS_DIR, archivo)
        if not os.path.exists(ruta):
            print(f"  ‚ö†Ô∏è Dependencia faltante: {archivo} (requerido por {notebook_name})")
            return False
    return True

def validar_salidas(notebook_name):
    """Valida que el notebook gener√≥ sus archivos de salida esperados."""
    if notebook_name not in CONTRATOS:
        return True

    for archivo in CONTRATOS[notebook_name]:
        if "*" in archivo:  # Patr√≥n como report_final_*.md
            pattern = os.path.join(BASE, archivo)
            if not glob.glob(pattern):
                print(f"  ‚ö†Ô∏è Archivo de salida faltante: {pattern}")
                return False
        else:
            ruta = os.path.join(BASE, archivo)
            if not os.path.exists(ruta):
                print(f"  ‚ö†Ô∏è Archivo de salida faltante: {ruta}")
                return False
    return True

def run_full_orchestrator(verbose=True):
    """
    Ejecuta la cadena completa de agentes con calibraci√≥n din√°mica y validaci√≥n.
    """
    if verbose:
        print("üîÑ Iniciando orquestador con calibraci√≥n din√°mica y validaci√≥n...")

    # 1. Leer rendimiento hist√≥rico para calibrar pesos
    PERF_PATH = f"{REPORTS_DIR}/performance_summary.json"
    agent_weights = {"fx_agent": 1.0, "quant_signals": 1.0}

    if os.path.exists(PERF_PATH):
        try:
            with open(PERF_PATH) as f:
                perf = json.load(f)
            if "fx_agent" in perf:
                precision = perf["fx_agent"]["precision_total"]
                agent_weights["fx_agent"] = min(1.5, max(0.5, precision / 0.7))
            if "quant_signals" in perf:
                precision = perf["quant_signals"]["precision_total"]
                agent_weights["quant_signals"] = min(1.5, max(0.5, precision / 0.7))
            if verbose:
                print(f"üìä Pesos calibrados: {agent_weights}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error al leer rendimiento: {e}. Usando pesos por defecto.")
    else:
        if verbose:
            print("‚ÑπÔ∏è No se encontr√≥ performance_summary.json. Usando pesos por defecto.")

    # 2. Pasar pesos como variables de entorno
    os.environ["FX_AGENT_WEIGHT"] = str(agent_weights["fx_agent"])
    os.environ["QUANT_AGENT_WEIGHT"] = str(agent_weights["quant_signals"])

    # 3. Lista de notebooks a ejecutar (¬°NO incluir el orquestador!)
    NOTEBOOKS = [
        "00_liquidity_agent.ipynb",      # 1. Liquidez global (independiente)
        "11_market_analyst.ipynb",       # 2. R√©gimen de mercado (independiente)
        "12_sectorial_strength.ipynb",   # 3. Fuerza sectorial (independiente)
        "01_data_prep.ipynb",            # 4. Precios de cartera (independiente)
        "02_portfolio_exposure.ipynb",   # 5. Cartera enriquecida (usa 01)
        "06_portfolio_reconstructor.ipynb", # 6. Valor diario (usa 01)
        "07_asset_metrics.ipynb",        # 7. M√©tricas por activo (usa 01 + 02)
        "03_fx_agent.ipynb",             # 8. Cobertura FX (usa 00 + 02 + 06)
        "04_quant_signals.ipynb",        # 9. Se√±ales cuantitativas (usa 02 + 11 + 12)
        "05_risk_manager.ipynb",         # 10. Riesgo (usa 06)
        "07_reporter_advanced.ipynb"     # 11. Reporte final (usa todos)
    ]

    # 4. Ejecutar notebooks con manejo de errores detallado
    log = []
    for nb in NOTEBOOKS:
        if verbose:
            print(f"\n‚ñ∂Ô∏è Ejecutando {nb}...")

        if not verificar_dependencias(nb):
            print(f"  ‚ùå {nb} interrumpido por dependencias faltantes.")
            log.append(f"{nb}: FALL√ì (dependencias)")
            continue

        cmd = [
            sys.executable, "-m", "nbconvert",
            "--to", "notebook",
            "--execute",
            f"{NOTEBOOKS_DIR}/{nb}",
            "--output", f"{NOTEBOOKS_DIR}/{nb}",
            "--log-level=ERROR"
        ]

        result = subprocess.run(cmd, capture_output=True, text=True)

        if result.returncode != 0:
            error_msg = f"""
‚ùå ERROR al ejecutar {nb}:
STDOUT: {result.stdout[-500:]}
STDERR: {result.stderr[-1000:]}
            """
            if verbose:
                print(error_msg)
            log.append(f"{nb}: FALL√ì")
        else:
            if not validar_salidas(nb):
                print(f"    ‚ùå {nb} no gener√≥ los archivos esperados.")
                log.append(f"{nb}: FALL√ì (archivos)")
            else:
                if verbose:
                    print(f"‚úÖ {nb} completado y validado.")
                log.append(f"{nb}: OK")

    # 5. Guardar log de ejecuci√≥n
    log_path = f"{REPORTS_DIR}/orchestrator_log_{datetime.now().strftime('%Y%m%d')}.txt"
    with open(log_path, "w") as f:
        f.write(f"Cadena ejecutada: {datetime.now()}\n")
        f.write("\n".join(log))

    # 6. Cargar resultados finales
    signals_df, kpis, actions, log_msg = load_final_results()

    # 7. Registrar ejecuci√≥n para evaluaci√≥n
    try:
        with open(f"{REPORTS_DIR}/market_regime_latest.json") as f:
            market_regime = json.load(f)["regimen"]
    except:
        market_regime = "Neutral"

    try:
        with open(f"{REPORTS_DIR}/liquidity_regime_latest.json") as f:
            liquidity_regime = json.load(f)["regimen"]
    except:
        liquidity_regime = "Neutral"

    log_signal(
        agente="orchestrator",
        tipo_senal="ejecucion_completa",
        recomendacion=f"Ejecuci√≥n completada - R√©gimen: {market_regime}, Liquidez: {liquidity_regime}",
        contexto={
            "liquidez_regime": liquidity_regime,
            "market_regime": market_regime
        },
        horizonte_eval="5d",
        metadata={
            "fecha_ejecucion": datetime.now().isoformat(),
            "agent_weights": agent_weights,
            "resultados": {
                "total_notebooks": len(log),
                "exitosos": sum("OK" in entry for entry in log),
                "fallidos": sum("FALL√ì" in entry for entry in log)
            }
        }
    )

    if verbose:
        print(f"\n‚úÖ Orquestador completado. Log guardado en: {log_path}")
        print(f"üìä Resultados: {len(log)} notebooks, {sum('OK' in entry for entry in log)} exitosos")

    return signals_df, kpis, actions, log_msg, log

def load_final_results():
    """Carga los resultados finales generados por el orquestador."""
    # Cargar cartera
    pf_path = f"{REPORTS_DIR}/portfolio_enriched_final.csv"
    pf = pd.read_csv(pf_path) if os.path.exists(pf_path) else pd.DataFrame()

    # Cargar riesgo
    risk_path = f"{REPORTS_DIR}/risk_dashboard.csv"
    risk = pd.read_csv(risk_path) if os.path.exists(risk_path) else pd.DataFrame()

    # Cargar m√©tricas
    metrics_path = f"{REPORTS_DIR}/asset_metrics.csv"
    metrics = pd.read_csv(metrics_path) if os.path.exists(metrics_path) else pd.DataFrame()

    # Extraer KPIs
    total = pf["importe_actual_eur"].sum() if not pf.empty else 0

    drawdown = "N/A"
    alpha = "N/A"
    retorno_cartera = "N/A"

    if not risk.empty and 'm√©trica' in risk.columns:
        def get_metric_value(metric_name):
            row = risk[risk['m√©trica'] == metric_name]
            return row['valor'].values[0] if not row.empty else "N/A"
        drawdown = get_metric_value('Drawdown actual')
        alpha = get_metric_value('Alpha vs S&P 500')
        retorno_cartera = get_metric_value('Retorno anualizado cartera')

    kpis = {
        "total_eur": total,
        "drawdown": drawdown,
        "alpha": alpha,
        "retorno_cartera": retorno_cartera
    }

    # Acciones (simuladas)
    actions = []
    signals_df = pd.DataFrame()

    log_msg = f"[{datetime.now().isoformat()}] Orquestador completado exitosamente"
    return signals_df, kpis, actions, log_msg

def generate_ai_dashboard_summary():
    """
    Genera un an√°lisis exhaustivo de la cartera usando GenAI,
    con sem√°foro, recomendaci√≥n y justificaci√≥n por indicador.
    """
    print("üß† Generando an√°lisis exhaustivo con GenAI...")

    try:
        import google.generativeai as genai
        GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyCjID5QZSe0xDvGaq7mTHcHOctWBaxaAn8")
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('models/gemini-2.0-flash')
    except ImportError:
        print("‚ö†Ô∏è google-generativeai no instalado. Instalando...")
        import subprocess
        subprocess.check_call([sys.executable, "-m", "pip", "install", "google-generativeai"])
        import google.generativeai as genai
        GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyCjID5QZSe0xDvGaq7mTHcHOctWBaxaAn8")
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('models/gemini-2.0-flash')

    # Cargar datos con manejo robusto
    pf_path = f"{REPORTS_DIR}/portfolio_enriched_final.csv"
    pf = pd.read_csv(pf_path) if os.path.exists(pf_path) else pd.DataFrame()

    risk_path = f"{REPORTS_DIR}/risk_dashboard.csv"
    risk = pd.read_csv(risk_path) if os.path.exists(risk_path) else pd.DataFrame()

    quant_path = f"{REPORTS_DIR}/quant_signals.csv"
    quant = pd.read_csv(quant_path) if os.path.exists(quant_path) else pd.DataFrame()

    fx_path = f"{REPORTS_DIR}/fx_hedge_signal.csv"
    fx = pd.read_csv(fx_path) if os.path.exists(fx_path) else pd.DataFrame()

    metrics_path = f"{REPORTS_DIR}/asset_metrics.csv"
    metrics = pd.read_csv(metrics_path) if os.path.exists(metrics_path) else pd.DataFrame()

    sectors_path = f"{REPORTS_DIR}/sector_strength_latest.json"
    sectors = {}
    if os.path.exists(sectors_path):
        with open(sectors_path) as f:
            sectors = json.load(f)

    # Extraer m√©tricas clave
    total = pf["importe_actual_eur"].sum() if not pf.empty else 0
    drawdown = "N/A"
    alpha = "N/A"
    retorno_cartera = "N/A"
    sp500_retorno = "N/A"

    if not risk.empty and 'm√©trica' in risk.columns:
        def get_metric_value(metric_name):
            row = risk[risk['m√©trica'] == metric_name]
            return row['valor'].values[0] if not row.empty else "N/A"
        drawdown = get_metric_value('Drawdown actual')
        alpha = get_metric_value('Alpha vs S&P 500')
        retorno_cartera = get_metric_value('Retorno anualizado cartera')
        sp500_retorno = get_metric_value('Retorno anualizado S&P 500')

    # Construir prompt para GenAI
    prompt = f"""
Eres un agente de inversi√≥n profesional con acceso a un sistema multiagente avanzado.
Tu tarea es generar un **an√°lisis exhaustivo de la cartera al {datetime.today().strftime('%Y-%m-%d')}** en formato de tabla con las siguientes columnas:

- **Categor√≠a**: riesgo, rendimiento, concentraci√≥n, FX, sectorial, se√±ales, etc.
- **Indicador**: nombre del indicador clave.
- **Valor**: valor num√©rico o categ√≥rico.
- **Sem√°foro**: usa ‚úÖ (verde), ‚ö†Ô∏è (√°mbar) o ‚ùå (rojo).
- **¬øVamos bien?**: "S√≠", "No" o "Parcialmente".
- **Recomendaci√≥n**: acci√≥n concreta (ej. "Rebalancear", "Aumentar XLK", "Cubrir 10% USD").
- **Justificaci√≥n**: explica por qu√©, citando el indicador y su valor.

**Reglas estrictas**:
- Usa **solo los datos proporcionados**.
- S√© **conciso, preciso y accionable**.
- No inventes datos.
- El tono debe ser profesional pero claro para un inversor no t√©cnico.

**Datos de la cartera**:
- Valor total: {total:,.0f} ‚Ç¨
- Drawdown actual: {drawdown}
- Retorno anualizado cartera: {retorno_cartera}
- Retorno anualizado S&P 500: {sp500_retorno}
- Alpha vs S&P 500: {alpha}

**Se√±ales sectoriales (Top oportunidades)**:
{'; '.join(sectors.get('top_oportunidades', [])) if sectors else 'No disponible'}

**Se√±ales cuantitativas (ejemplos)**:
{quant.head(5).to_string(index=False) if not quant.empty else 'No disponible'}

**Se√±ales FX**:
{fx.head(5).to_string(index=False) if not fx.empty else 'No disponible'}

Genera la tabla en **formato Markdown**. No a√±adas introducci√≥n ni conclusi√≥n, solo la tabla.
"""

    try:
        response = model.generate_content(prompt)
        analysis_md = response.text

        output_path = f"{REPORTS_DIR}/ai_dashboard_summary_{datetime.today().strftime('%Y%m%d')}.md"
        with open(output_path, "w", encoding="utf-8") as f:
            f.write("# üìä An√°lisis Exhaustivo de Cartera (GenAI)\n\n")
            f.write(f"Fecha: {datetime.today().strftime('%Y-%m-%d')}\n\n")
            f.write(analysis_md)

        print(f"‚úÖ An√°lisis guardado en: {output_path}")
        return analysis_md

    except Exception as e:
        error_msg = f"‚ö†Ô∏è Error al generar an√°lisis con GenAI: {e}"
        print(error_msg)
        return error_msg

def answer_question(user_question):
    """
    Responde preguntas del usuario usando GenAI y los datos actuales.
    """
    try:
        import google.generativeai as genai
        GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyCjID5QZSe0xDvGaq7mTHcHOctWBaxaAn8")
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('models/gemini-2.0-flash')
    except ImportError:
        import subprocess
        subprocess.check_call([sys.executable, "-m", "pip", "install", "google-generativeai"])
        import google.generativeai as genai
        GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyCjID5QZSe0xDvGaq7mTHcHOctWBaxaAn8")
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('models/gemini-2.0-flash')

    # Cargar datos existentes con manejo de errores
    pf_path = f"{REPORTS_DIR}/portfolio_enriched_final.csv"
    pf = pd.read_csv(pf_path) if os.path.exists(pf_path) else pd.DataFrame()

    risk_path = f"{REPORTS_DIR}/risk_dashboard.csv"
    risk = pd.read_csv(risk_path) if os.path.exists(risk_path) else pd.DataFrame()

    quant_path = f"{REPORTS_DIR}/quant_signals.csv"
    quant = pd.read_csv(quant_path) if os.path.exists(quant_path) else pd.DataFrame()

    fx_path = f"{REPORTS_DIR}/fx_hedge_signal.csv"
    fx = pd.read_csv(fx_path) if os.path.exists(fx_path) else pd.DataFrame()

    metrics_path = f"{REPORTS_DIR}/asset_metrics.csv"
    metrics = pd.read_csv(metrics_path) if os.path.exists(metrics_path) else pd.DataFrame()

    # Cargar contexto MACRO
    macro_str = "No disponible"
    macro_path = f"{REPORTS_DIR}/market_regime_latest.json"
    if os.path.exists(macro_path):
        with open(macro_path) as f:
            macro = json.load(f)
        macro_str = f"{macro['regimen']} (Score: {macro['score']:.2f}, Percentil: {macro['percentil']:.0f}%)"

    # Cargar fuerza SECTORIAL
    sectors_str = "No disponible"
    sectors_path = f"{REPORTS_DIR}/sector_strength_latest.json"
    if os.path.exists(sectors_path):
        with open(sectors_path) as f:
            sectors_data = json.load(f)
        if sectors_data.get("top_oportunidades"):
            sectors_str = "; ".join(sectors_data["top_oportunidades"])

    # Extraer KPIs de riesgo
    drawdown = "N/A"
    alpha = "N/A"

    if not risk.empty and 'm√©trica' in risk.columns:
        def get_metric_value(metric_name):
            row = risk[risk['m√©trica'] == metric_name]
            return row['valor'].values[0] if not row.empty else "N/A"
        drawdown = get_metric_value('Drawdown actual')
        alpha = get_metric_value('Alpha vs S&P 500')

    total = pf["importe_actual_eur"].sum() if not pf.empty else 0
    quant_summary = "Ninguna" if quant.empty else ", ".join([f"{row['Activo']}: {row['Se√±al']}" for _, row in quant.iterrows()])
    fx_summary = "Ninguna" if fx.empty else ", ".join([f"{row['divisa']}: {row['cobertura_recomendada']} ({row['%_cobertura']}%)" for _, row in fx.iterrows()])
    acn_alpha = "N/A"
    if not metrics.empty and "ACN" in metrics["Activo"].values:
        acn_row = metrics[metrics["Activo"] == "ACN"].iloc[0]
        acn_alpha = f"{acn_row['Retorno total mejorado']:.1%}" if pd.notna(acn_row.get('Retorno total mejorado')) else "N/A"

    context = f"""
    Eres un asistente de inversi√≥n personal. Responde usando SOLO estos datos:

    **Contexto Macro Actual:**
    - R√©gimen: {macro_str}

    **Fuerza Sectorial (Top oportunidades):**
    - {sectors_str}

    **Cartera Global:**
    - Valor total: {total:,.0f} ‚Ç¨
    - Drawdown: {drawdown}
    - Alpha vs S&P 500: {alpha}

    **Se√±ales Cuantitativas:**
    - {quant_summary}

    **Se√±ales FX:**
    - {fx_summary}

    **Insights por Activo:**
    - Alpha de ACN (incluyendo regalos): {acn_alpha}

    Pregunta del usuario: {user_question}
    """

    response = model.generate_content(context)
    return response.text

# === INTERFAZ PRINCIPAL ===
def main():
    print("üß† Orchestrator + Agente GenAI Activo (Fusi√≥n)")
    print("Comandos:")
    print("- 'semanal': ejecuta la cadena completa de agentes")
    print("- 'pregunta [tu pregunta]': interact√∫a con GenAI")
    print("- 'analisis': genera an√°lisis exhaustivo con GenAI")
    print("- 'salir': termina")

    while True:
        user_input = input("\n> ").strip()

        if user_input == "salir":
            break
        elif user_input == "semanal":
            run_full_orchestrator(verbose=True)
        elif user_input.startswith("pregunta "):
            question = user_input[9:]
            answer = answer_question(question)
            print(f"\nü§ñ {answer}")
        elif user_input == "analisis":
            generate_ai_dashboard_summary()
        else:
            print("‚ùì Comando no reconocido. Usa 'semanal', 'pregunta ...', 'analisis' o 'salir'.")

if __name__ == "__main__":
    main()